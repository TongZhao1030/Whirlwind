# generated by maixhub, tested on maixpy3 v0.4.8
# copy files to TF card and plug into board and power on
import sensor, image, lcd, time
import KPU as kpu
import gc, sys
from machine import UART
from fpioa_manager import fm

input_size = (224, 224)
labels = ['tennis', 'w']
anchors = [0.53, 0.66, 0.94, 1.19, 0.41, 0.5, 0.69, 0.88, 1.22, 0.78]

fm.register(9, fm.fpioa.UART1_TX, force=True)
fm.register(10, fm.fpioa.UART1_RX, force=True)
uart_A = UART(UART.UART1, 115200, 8, 1, 0, timeout=1000, read_buf_len=4096)

def lcd_show_except(e):
    import uio
    err_str = uio.StringIO()
    sys.print_exception(e, err_str)
    err_str = err_str.getvalue()
    img = image.Image(size=input_size)
    img.draw_string(0, 10, err_str, scale=1, color=(0xff,0x00,0x00))
    lcd.display(img)

def main(anchors, labels = None, model_addr="/sd/m.kmodel", sensor_window=input_size, lcd_rotation=0, sensor_hmirror=False, sensor_vflip=False):
    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QVGA)
    sensor.set_windowing(sensor_window)
    sensor.set_hmirror(sensor_hmirror)
    sensor.set_vflip(sensor_vflip)
    sensor.run(1)

    lcd.init(type=1)
    lcd.rotation(lcd_rotation)
    lcd.clear(lcd.WHITE)

    if not labels:
        with open('labels.txt','r') as f:
            exec(f.read())
    if not labels:
        print("no labels.txt")
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "no labels.txt", color=(255, 0, 0), scale=2)
        lcd.display(img)
        return 1
    try:
        img = image.Image("startup.jpg")
        lcd.display(img)
    except Exception:
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "loading model...", color=(255, 255, 255), scale=2)
        lcd.display(img)

    try:
        task = None
        task = kpu.load(0x300000,1903016)
        kpu.init_yolo2(task, 0.5, 0.3, 5, anchors) # threshold:[0,1], nms_value: [0, 1]
        while(True):
            img = sensor.snapshot()
            t = time.ticks_ms()
            objects = kpu.run_yolo2(task, img)
            t = time.ticks_ms() - t
            if not objects:
                img.draw_string(0,0,"Detected tennis number:0", scale=1, color=(255, 0, 0))
            if objects:
                img.draw_string(0,0,"Detected tennis number:%d" % len(objects), scale=1, color=(255, 0, 0))
                scale_min = 0
                for obj in objects:
                    pos = obj.rect()
                    img.draw_rectangle(pos)
                    img.draw_string(pos[0], pos[1]+pos[3], "%s : %.2f" %(labels[obj.classid()], obj.value()), scale=2, color=(255, 0, 0))
                    objx = pos[0]+pos[2]/2
                    objy = pos[1]+pos[3]/2
                    direction = objx/112-1
                    if pos[2]>pos[3]:
                        scale = pos[2]
                    else:scale = pos[3]
                    if scale > scale_min:
                        scale_min = scale
                        info_tem = "{},{}".format(direction,scale)
                        length_tem = 'l%02d'%len(info_tem)
                    #info = "{},{}".format(direction,scale)
                    #length = 'l%02d'%len(info)
                    #uart_A.write(length)
                    #uart_A.write(info)
                    #print("(%d,%d) scale:%d" % (objx,objy,scale))
                    #print("{},{}".format(direction,scale))
                uart_A.write(length_tem)
                uart_A.write(info_tem)
                print(info_tem)
            img.draw_string(0, 200, "t:%dms" %(t), scale=2, color=(255, 0, 0))
            lcd.display(img)
    except Exception as e:
        raise e
    finally:
        if not task is None:
            kpu.deinit(task)


if __name__ == "__main__":
    try:
         main(anchors = anchors, labels=labels, model_addr=0x300000, lcd_rotation=0)
        #main(anchors = anchors, labels=labels, model_addr="/sd/model-39151.kmodel")
    except Exception as e:
        sys.print_exception(e)
        lcd_show_except(e)
    finally:
        gc.collect()






labels = ['tennis', 'w']
anchors = [0.53, 0.66, 0.94, 1.19, 0.41, 0.5, 0.69, 0.88, 1.22, 0.78]
